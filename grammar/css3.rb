# Autogenerated from a Treetop grammar. Edits may be lost.


module CSS
  module CSS3
    include Treetop::Runtime

    def root
      @root ||= :stylesheet
    end

    def _nt_stylesheet
      start_index = index
      if node_cache[:stylesheet].has_key?(index)
        cached = node_cache[:stylesheet][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1 = index
        if has_terminal?('<!--', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('<!--')
          r2 = nil
        end
        if r2
          r1 = r2
        else
          if has_terminal?('-->', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure('-->')
            r3 = nil
          end
          if r3
            r1 = r3
          else
            r4 = _nt_w
            if r4
              r1 = r4
            else
              r5 = _nt_statement
              if r5
                r1 = r5
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      r0 = instantiate_node(CSS::Stylesheet,input, i0...index, s0)

      node_cache[:stylesheet][start_index] = r0

      r0
    end

    def _nt_statement
      start_index = index
      if node_cache[:statement].has_key?(index)
        cached = node_cache[:statement][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_ruleset
      if r1
        r0 = r1
      else
        r2 = _nt_at_rule
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:statement][start_index] = r0

      r0
    end

    module AtRule0
      def ws
        elements[1]
      end
    end

    module AtRule1
      def atkeyword
        elements[0]
      end

      def ws
        elements[1]
      end

    end

    def _nt_at_rule
      start_index = index
      if node_cache[:at_rule].has_key?(index)
        cached = node_cache[:at_rule][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_atkeyword
      s0 << r1
      if r1
        r2 = _nt_ws
        s0 << r2
        if r2
          s3, i3 = [], index
          loop do
            r4 = _nt_any
            if r4
              s3 << r4
            else
              break
            end
          end
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          s0 << r3
          if r3
            i5 = index
            r6 = _nt_block
            if r6
              r5 = r6
            else
              i7, s7 = index, []
              if has_terminal?(';', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(';')
                r8 = nil
              end
              s7 << r8
              if r8
                r9 = _nt_ws
                s7 << r9
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(AtRule0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                r5 = r7
              else
                @index = i5
                r5 = nil
              end
            end
            s0 << r5
          end
        end
      end
      if s0.last
        r0 = instantiate_node(CSS::AtRule,input, i0...index, s0)
        r0.extend(AtRule1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:at_rule][start_index] = r0

      r0
    end

    module Block0
      def atkeyword
        elements[0]
      end

      def ws
        elements[1]
      end
    end

    module Block1
      def ws
        elements[1]
      end
    end

    module Block2
      def ws1
        elements[1]
      end

      def ws2
        elements[3]
      end

      def ws3
        elements[5]
      end
    end

    def _nt_block
      start_index = index
      if node_cache[:block].has_key?(index)
        cached = node_cache[:block][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('{', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('{')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_ws
        s0 << r2
        if r2
          s3, i3 = [], index
          loop do
            i4 = index
            r5 = _nt_any
            if r5
              r4 = r5
            else
              r6 = _nt_block
              if r6
                r4 = r6
              else
                i7, s7 = index, []
                r8 = _nt_atkeyword
                s7 << r8
                if r8
                  r9 = _nt_ws
                  s7 << r9
                end
                if s7.last
                  r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                  r7.extend(Block0)
                else
                  @index = i7
                  r7 = nil
                end
                if r7
                  r4 = r7
                else
                  i10, s10 = index, []
                  if has_terminal?(';', false, index)
                    r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(';')
                    r11 = nil
                  end
                  s10 << r11
                  if r11
                    r12 = _nt_ws
                    s10 << r12
                  end
                  if s10.last
                    r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                    r10.extend(Block1)
                  else
                    @index = i10
                    r10 = nil
                  end
                  if r10
                    r4 = r10
                  else
                    @index = i4
                    r4 = nil
                  end
                end
              end
            end
            if r4
              s3 << r4
            else
              break
            end
          end
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          s0 << r3
          if r3
            r13 = _nt_ws
            s0 << r13
            if r13
              if has_terminal?('}', false, index)
                r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('}')
                r14 = nil
              end
              s0 << r14
              if r14
                r15 = _nt_ws
                s0 << r15
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Block2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:block][start_index] = r0

      r0
    end

    module Ruleset0
      def ws
        elements[1]
      end

    end

    module Ruleset1
      def ws1
        elements[2]
      end

      def ws2
        elements[6]
      end
    end

    def _nt_ruleset
      start_index = index
      if node_cache[:ruleset].has_key?(index)
        cached = node_cache[:ruleset][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r2 = _nt_selector
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if has_terminal?('{', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('{')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_ws
          s0 << r4
          if r4
            r6 = _nt_declaration
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              s7, i7 = [], index
              loop do
                i8, s8 = index, []
                if has_terminal?(';', false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(';')
                  r9 = nil
                end
                s8 << r9
                if r9
                  r10 = _nt_ws
                  s8 << r10
                  if r10
                    r12 = _nt_declaration
                    if r12
                      r11 = r12
                    else
                      r11 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s8 << r11
                  end
                end
                if s8.last
                  r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                  r8.extend(Ruleset0)
                else
                  @index = i8
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
              end
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              s0 << r7
              if r7
                if has_terminal?('}', false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('}')
                  r13 = nil
                end
                s0 << r13
                if r13
                  r14 = _nt_ws
                  s0 << r14
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(CSS::RuleSet,input, i0...index, s0)
        r0.extend(Ruleset1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:ruleset][start_index] = r0

      r0
    end

    def _nt_selector
      start_index = index
      if node_cache[:selector].has_key?(index)
        cached = node_cache[:selector][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        r1 = _nt_any
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(CSS::Selector,input, i0...index, s0)
      end

      node_cache[:selector][start_index] = r0

      r0
    end

    module Declaration0
      def property
        elements[0]
      end

      def ws
        elements[2]
      end

      def value
        elements[3]
      end
    end

    def _nt_declaration
      start_index = index
      if node_cache[:declaration].has_key?(index)
        cached = node_cache[:declaration][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_property
      s0 << r1
      if r1
        if has_terminal?(':', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_ws
          s0 << r3
          if r3
            r4 = _nt_value
            s0 << r4
          end
        end
      end
      if s0.last
        r0 = instantiate_node(CSS::Declaration,input, i0...index, s0)
        r0.extend(Declaration0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:declaration][start_index] = r0

      r0
    end

    module Property0
      def ident
        elements[0]
      end

      def ws
        elements[1]
      end
    end

    def _nt_property
      start_index = index
      if node_cache[:property].has_key?(index)
        cached = node_cache[:property][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_ident
      s0 << r1
      if r1
        r2 = _nt_ws
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Property0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:property][start_index] = r0

      r0
    end

    module Value0
      def atkeyword
        elements[0]
      end

      def ws
        elements[1]
      end
    end

    def _nt_value
      start_index = index
      if node_cache[:value].has_key?(index)
        cached = node_cache[:value][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1 = index
        r2 = _nt_any
        if r2
          r1 = r2
        else
          r3 = _nt_block
          if r3
            r1 = r3
          else
            i4, s4 = index, []
            r5 = _nt_atkeyword
            s4 << r5
            if r5
              r6 = _nt_ws
              s4 << r6
            end
            if s4.last
              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
              r4.extend(Value0)
            else
              @index = i4
              r4 = nil
            end
            if r4
              r1 = r4
            else
              @index = i1
              r1 = nil
            end
          end
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:value][start_index] = r0

      r0
    end

    module Any0
      def function
        elements[0]
      end

      def ws
        elements[1]
      end

    end

    module Any1
      def ws
        elements[1]
      end

    end

    module Any2
      def ws
        elements[1]
      end

    end

    def _nt_any
      start_index = index
      if node_cache[:any].has_key?(index)
        cached = node_cache[:any][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_ident
      if r1
        r0 = r1
      else
        r2 = _nt_number
        if r2
          r0 = r2
        else
          r3 = _nt_percentage
          if r3
            r0 = r3
          else
            r4 = _nt_dimension
            if r4
              r0 = r4
            else
              r5 = _nt_string
              if r5
                r0 = r5
              else
                r6 = _nt_uri
                if r6
                  r0 = r6
                else
                  r7 = _nt_hash
                  if r7
                    r0 = r7
                  else
                    r8 = _nt_includes
                    if r8
                      r0 = r8
                    else
                      i9, s9 = index, []
                      r10 = _nt_function
                      s9 << r10
                      if r10
                        r11 = _nt_ws
                        s9 << r11
                        if r11
                          s12, i12 = [], index
                          loop do
                            r13 = _nt_any
                            if r13
                              s12 << r13
                            else
                              break
                            end
                          end
                          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                          s9 << r12
                          if r12
                            if has_terminal?(')', false, index)
                              r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(')')
                              r14 = nil
                            end
                            s9 << r14
                          end
                        end
                      end
                      if s9.last
                        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                        r9.extend(Any0)
                      else
                        @index = i9
                        r9 = nil
                      end
                      if r9
                        r0 = r9
                      else
                        r15 = _nt_dashmatch
                        if r15
                          r0 = r15
                        else
                          i16, s16 = index, []
                          if has_terminal?('(', false, index)
                            r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure('(')
                            r17 = nil
                          end
                          s16 << r17
                          if r17
                            r18 = _nt_ws
                            s16 << r18
                            if r18
                              s19, i19 = [], index
                              loop do
                                r20 = _nt_any
                                if r20
                                  s19 << r20
                                else
                                  break
                                end
                              end
                              r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                              s16 << r19
                              if r19
                                if has_terminal?(')', false, index)
                                  r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(')')
                                  r21 = nil
                                end
                                s16 << r21
                              end
                            end
                          end
                          if s16.last
                            r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
                            r16.extend(Any1)
                          else
                            @index = i16
                            r16 = nil
                          end
                          if r16
                            r0 = r16
                          else
                            i22, s22 = index, []
                            if has_terminal?('[', false, index)
                              r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('[')
                              r23 = nil
                            end
                            s22 << r23
                            if r23
                              r24 = _nt_ws
                              s22 << r24
                              if r24
                                s25, i25 = [], index
                                loop do
                                  r26 = _nt_any
                                  if r26
                                    s25 << r26
                                  else
                                    break
                                  end
                                end
                                r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
                                s22 << r25
                                if r25
                                  if has_terminal?(']', false, index)
                                    r27 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                    @index += 1
                                  else
                                    terminal_parse_failure(']')
                                    r27 = nil
                                  end
                                  s22 << r27
                                end
                              end
                            end
                            if s22.last
                              r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                              r22.extend(Any2)
                            else
                              @index = i22
                              r22 = nil
                            end
                            if r22
                              r0 = r22
                            else
                              r28 = _nt_w
                              if r28
                                r0 = r28
                              else
                                @index = i0
                                r0 = nil
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:any][start_index] = r0

      r0
    end

    module Ident0
    end

    def _nt_ident
      start_index = index
      if node_cache[:ident].has_key?(index)
        cached = node_cache[:ident][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('-', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        i3 = index
        if has_terminal?('\G[a-zA-Z]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('_', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('_')
            r5 = nil
          end
          if r5
            r3 = r5
          else
            r6 = _nt_nonascii
            if r6
              r3 = r6
            else
              r7 = _nt_escape
              if r7
                r3 = r7
              else
                @index = i3
                r3 = nil
              end
            end
          end
        end
        s0 << r3
        if r3
          s8, i8 = [], index
          loop do
            r9 = _nt_nmchar
            if r9
              s8 << r9
            else
              break
            end
          end
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          s0 << r8
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Ident0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:ident][start_index] = r0

      r0
    end

    module Atkeyword0
      def ident
        elements[1]
      end
    end

    def _nt_atkeyword
      start_index = index
      if node_cache[:atkeyword].has_key?(index)
        cached = node_cache[:atkeyword][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('@', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('@')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_ident
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Atkeyword0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:atkeyword][start_index] = r0

      r0
    end

    module Hash0
      def ident
        elements[1]
      end
    end

    def _nt_hash
      start_index = index
      if node_cache[:hash].has_key?(index)
        cached = node_cache[:hash][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('#', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('#')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_ident
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Hash0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:hash][start_index] = r0

      r0
    end

    module Percentage0
      def number
        elements[0]
      end

    end

    def _nt_percentage
      start_index = index
      if node_cache[:percentage].has_key?(index)
        cached = node_cache[:percentage][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_number
      s0 << r1
      if r1
        if has_terminal?('%', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('%')
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Percentage0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:percentage][start_index] = r0

      r0
    end

    module Dimension0
      def number
        elements[0]
      end

      def ident
        elements[1]
      end
    end

    def _nt_dimension
      start_index = index
      if node_cache[:dimension].has_key?(index)
        cached = node_cache[:dimension][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_number
      s0 << r1
      if r1
        r2 = _nt_ident
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Dimension0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:dimension][start_index] = r0

      r0
    end

    module Uri0
      def ws1
        elements[1]
      end

      def ws2
        elements[3]
      end

    end

    def _nt_uri
      start_index = index
      if node_cache[:uri].has_key?(index)
        cached = node_cache[:uri][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('url(', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('url(')
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_ws
        s0 << r2
        if r2
          i3 = index
          r4 = _nt_string
          if r4
            r3 = r4
          else
            s5, i5 = [], index
            loop do
              r6 = _nt_urlchar
              if r6
                s5 << r6
              else
                break
              end
            end
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            if r5
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          s0 << r3
          if r3
            r7 = _nt_ws
            s0 << r7
            if r7
              if has_terminal?(')', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r8 = nil
              end
              s0 << r8
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Uri0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:uri][start_index] = r0

      r0
    end

    module UnicodeRange0
    end

    module UnicodeRange1
    end

    def _nt_unicode_range
      start_index = index
      if node_cache[:unicode_range].has_key?(index)
        cached = node_cache[:unicode_range][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('U+', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('U+')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[0-9A-F?]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
          if s2.size == 6
            break
          end
        end
        if s2.size < 1
          @index = i2
          r2 = nil
        else
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        end
        s0 << r2
        if r2
          i5, s5 = index, []
          if has_terminal?('-', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('-')
            r6 = nil
          end
          s5 << r6
          if r6
            s7, i7 = [], index
            loop do
              if has_terminal?('\G[0-9A-F]', true, index)
                r8 = true
                @index += 1
              else
                r8 = nil
              end
              if r8
                s7 << r8
              else
                break
              end
              if s7.size == 6
                break
              end
            end
            if s7.size < 1
              @index = i7
              r7 = nil
            else
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            end
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(UnicodeRange0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(UnicodeRange1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:unicode_range][start_index] = r0

      r0
    end

    module Comment0
    end

    module Comment1
    end

    def _nt_comment
      start_index = index
      if node_cache[:comment].has_key?(index)
        cached = node_cache[:comment][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('/*', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('/*')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[^*]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          s4, i4 = [], index
          loop do
            if has_terminal?('*', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('*')
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          if s4.empty?
            @index = i4
            r4 = nil
          else
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          end
          s0 << r4
          if r4
            s6, i6 = [], index
            loop do
              i7, s7 = index, []
              if has_terminal?('\G[^/]', true, index)
                r8 = true
                @index += 1
              else
                r8 = nil
              end
              s7 << r8
              if r8
                s9, i9 = [], index
                loop do
                  if has_terminal?('\G[^*]', true, index)
                    r10 = true
                    @index += 1
                  else
                    r10 = nil
                  end
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                s7 << r9
                if r9
                  s11, i11 = [], index
                  loop do
                    if has_terminal?('*', false, index)
                      r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('*')
                      r12 = nil
                    end
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  if s11.empty?
                    @index = i11
                    r11 = nil
                  else
                    r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  end
                  s7 << r11
                end
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(Comment0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                s6 << r7
              else
                break
              end
            end
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            s0 << r6
            if r6
              if has_terminal?('/', false, index)
                r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('/')
                r13 = nil
              end
              s0 << r13
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Comment1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:comment][start_index] = r0

      r0
    end

    module Function0
      def ident
        elements[0]
      end

    end

    def _nt_function
      start_index = index
      if node_cache[:function].has_key?(index)
        cached = node_cache[:function][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_ident
      s0 << r1
      if r1
        if has_terminal?('(', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Function0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:function][start_index] = r0

      r0
    end

    def _nt_includes
      start_index = index
      if node_cache[:includes].has_key?(index)
        cached = node_cache[:includes][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('~=', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('~=')
        r0 = nil
      end

      node_cache[:includes][start_index] = r0

      r0
    end

    def _nt_dashmatch
      start_index = index
      if node_cache[:dashmatch].has_key?(index)
        cached = node_cache[:dashmatch][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('|=', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('|=')
        r0 = nil
      end

      node_cache[:dashmatch][start_index] = r0

      r0
    end

    def _nt_prefixmatch
      start_index = index
      if node_cache[:prefixmatch].has_key?(index)
        cached = node_cache[:prefixmatch][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('^=', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('^=')
        r0 = nil
      end

      node_cache[:prefixmatch][start_index] = r0

      r0
    end

    def _nt_suffixmatch
      start_index = index
      if node_cache[:suffixmatch].has_key?(index)
        cached = node_cache[:suffixmatch][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('$=', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('$=')
        r0 = nil
      end

      node_cache[:suffixmatch][start_index] = r0

      r0
    end

    def _nt_substringmatch
      start_index = index
      if node_cache[:substringmatch].has_key?(index)
        cached = node_cache[:substringmatch][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('*=', false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('*=')
        r0 = nil
      end

      node_cache[:substringmatch][start_index] = r0

      r0
    end

    def _nt_name
      start_index = index
      if node_cache[:name].has_key?(index)
        cached = node_cache[:name][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        r1 = _nt_nmchar
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:name][start_index] = r0

      r0
    end

    def _nt_nonascii
      start_index = index
      if node_cache[:nonascii].has_key?(index)
        cached = node_cache[:nonascii][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('\G[\\u0080-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]', true, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        r0 = nil
      end

      node_cache[:nonascii][start_index] = r0

      r0
    end

    module Unicode0
    end

    def _nt_unicode
      start_index = index
      if node_cache[:unicode].has_key?(index)
        cached = node_cache[:unicode][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\\', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('\\')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[0-9a-fA-F]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
          if s2.size == 6
            break
          end
        end
        if s2.size < 1
          @index = i2
          r2 = nil
        else
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        end
        s0 << r2
        if r2
          r5 = _nt_w
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Unicode0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:unicode][start_index] = r0

      r0
    end

    module Escape0
    end

    def _nt_escape
      start_index = index
      if node_cache[:escape].has_key?(index)
        cached = node_cache[:escape][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_unicode
      if r1
        r0 = r1
      else
        i2, s2 = index, []
        if has_terminal?('\\', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('\\')
          r3 = nil
        end
        s2 << r3
        if r3
          if has_terminal?('\G[\\u20-\\u7E\\u80-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s2 << r4
        end
        if s2.last
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          r2.extend(Escape0)
        else
          @index = i2
          r2 = nil
        end
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:escape][start_index] = r0

      r0
    end

    def _nt_nmchar
      start_index = index
      if node_cache[:nmchar].has_key?(index)
        cached = node_cache[:nmchar][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if has_terminal?('\G[a-zA-Z0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?('-', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r2 = nil
        end
        if r2
          r0 = r2
        else
          if has_terminal?('_', false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('_')
            r3 = nil
          end
          if r3
            r0 = r3
          else
            r4 = _nt_nonascii
            if r4
              r0 = r4
            else
              r5 = _nt_escape
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:nmchar][start_index] = r0

      r0
    end

    module Number0
    end

    def _nt_number
      start_index = index
      if node_cache[:number].has_key?(index)
        cached = node_cache[:number][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s1 << r2
      if r2
        if has_terminal?('.', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r4 = nil
        end
        s1 << r4
        if r4
          s5, i5 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r6 = true
              @index += 1
            else
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s1 << r5
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Number0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        s7, i7 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          if r8
            s7 << r8
          else
            break
          end
        end
        if s7.empty?
          @index = i7
          r7 = nil
        else
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        end
        if r7
          r0 = r7
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:number][start_index] = r0

      r0
    end

    module String0
    end

    module String1
    end

    def _nt_string
      start_index = index
      if node_cache[:string].has_key?(index)
        cached = node_cache[:string][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      if has_terminal?('"', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('"')
        r2 = nil
      end
      s1 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4 = index
          r5 = _nt_stringchar
          if r5
            r4 = r5
          else
            if has_terminal?("'", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r6 = nil
            end
            if r6
              r4 = r6
            else
              @index = i4
              r4 = nil
            end
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s1 << r3
        if r3
          if has_terminal?('"', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r7 = nil
          end
          s1 << r7
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(String0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i8, s8 = index, []
        if has_terminal?("'", false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r9 = nil
        end
        s8 << r9
        if r9
          i10 = index
          r11 = _nt_stringchar
          if r11
            r10 = r11
          else
            if has_terminal?('"', false, index)
              r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('"')
              r12 = nil
            end
            if r12
              r10 = r12
            else
              @index = i10
              r10 = nil
            end
          end
          s8 << r10
          if r10
            if has_terminal?("'", false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r13 = nil
            end
            s8 << r13
          end
        end
        if s8.last
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          r8.extend(String1)
        else
          @index = i8
          r8 = nil
        end
        if r8
          r0 = r8
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:string][start_index] = r0

      r0
    end

    module Stringchar0
      def nl
        elements[1]
      end
    end

    def _nt_stringchar
      start_index = index
      if node_cache[:stringchar].has_key?(index)
        cached = node_cache[:stringchar][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_urlchar
      if r1
        r0 = r1
      else
        if has_terminal?("\x20", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\x20")
          r2 = nil
        end
        if r2
          r0 = r2
        else
          i3, s3 = index, []
          if has_terminal?('\\', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('\\')
            r4 = nil
          end
          s3 << r4
          if r4
            r5 = _nt_nl
            s3 << r5
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(Stringchar0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:stringchar][start_index] = r0

      r0
    end

    def _nt_urlchar
      start_index = index
      if node_cache[:urlchar].has_key?(index)
        cached = node_cache[:urlchar][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if has_terminal?('\G[\\x9\\x21\\x23-\\x26\\x27-\\x7E]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        r0 = r1
      else
        r2 = _nt_nonascii
        if r2
          r0 = r2
        else
          r3 = _nt_escape
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:urlchar][start_index] = r0

      r0
    end

    def _nt_nl
      start_index = index
      if node_cache[:nl].has_key?(index)
        cached = node_cache[:nl][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if has_terminal?("\n", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?("\r\n", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("\r\n")
          r2 = nil
        end
        if r2
          r0 = r2
        else
          if has_terminal?("\r", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\r")
            r3 = nil
          end
          if r3
            r0 = r3
          else
            if has_terminal?("\f", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\f")
              r4 = nil
            end
            if r4
              r0 = r4
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:nl][start_index] = r0

      r0
    end

    def _nt_w
      start_index = index
      if node_cache[:w].has_key?(index)
        cached = node_cache[:w][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if has_terminal?("\t", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\t")
        r1 = nil
      end
      if r1
        r0 = r1
      else
        if has_terminal?("\n", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r2 = nil
        end
        if r2
          r0 = r2
        else
          if has_terminal?("\f", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\f")
            r3 = nil
          end
          if r3
            r0 = r3
          else
            if has_terminal?("\r", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\r")
              r4 = nil
            end
            if r4
              r0 = r4
            else
              if has_terminal?(' ', false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(' ')
                r5 = nil
              end
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:w][start_index] = r0

      r0
    end

    def _nt_ws
      start_index = index
      if node_cache[:ws].has_key?(index)
        cached = node_cache[:ws][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        r1 = _nt_w
        if r1
          s0 << r1
        else
          break
        end
      end
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

      node_cache[:ws][start_index] = r0

      r0
    end

  end

  class CSS3Parser < Treetop::Runtime::CompiledParser
    include CSS3
  end

end
